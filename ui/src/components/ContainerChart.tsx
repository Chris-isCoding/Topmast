import React, { useEffect, useRef } from 'react';

import { useAppContext } from '../context/AppContext';
import {
    Chart as ChartJS,
    CategoryScale,
    TimeScale,
    LinearScale,
    BarElement,
    ArcElement,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend,
  } from 'chart.js';

  // import individual components to save space
  import {
    Bar,
    Doughnut,
    Line,
   } from 'react-chartjs-2';

   import Chart from 'chart.js/auto'

   (async function testChart() {
     const data = [
       { year: 2010, count: 10 },
       { year: 2011, count: 20 },
       { year: 2012, count: 15 },
       { year: 2013, count: 25 },
       { year: 2014, count: 22 },
       { year: 2015, count: 30 },
       { year: 2016, count: 28 },
     ];

     new Chart(
       document.getElementById('vcc'),
       {
         type: 'bar',
         data: {
           labels: data.map(row => row.year),
           datasets: [
             {
               label: 'Acquisitions by year',
               data: data.map(row => row.count)
             }
           ]
         }
       }
     );
   })();



  // FAKER FOR DEV TESTING Data
  import { faker } from '@faker-js/faker';

  ChartJS.register(
    CategoryScale,
    TimeScale,
    LinearScale,
    BarElement,
    ArcElement,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend,
  );

  const ContainerChart = () => {

    const {
      currentContainer,
      containers,
      stats,
    } = useAppContext();


    // ## Chart Demo Data ##
    const barOptions = {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'top' as const,
        },
        title: {
          display: true,
          text: 'Very Important Container Data',
        },
      },
    };

    const labels = [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
    ];

//    setInterval(function() {
//         const newLabel = (Math.random() + 1).toString(36).substring(7);
//         const newData = Math.floor(Math.random() * (10 - 1 + 1)) + 1;
//         labels.push(newLabel);
//         console.log("*******",labels)
//     }, 2000);

    // bar chart data, generated by faker
    const barData = {
      labels,
      datasets: [
        {
          label: 'Important Dataset 1',
          // data: [120, 190, 300, 500, 900, 350, 200],
          data: labels.map(() => faker.datatype.number({ min: 0, max: 1000 })),
          backgroundColor: 'rgba(255, 99, 132, 0.5)',
        },
        {
          label: 'Important Dataset 2',
          data: labels.map(() => faker.datatype.number({ min: 0, max: 1000 })),
          backgroundColor: 'rgba(53, 162, 235, 0.5)',
        },
      ],
    };


    const doughData = {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [
        {
          label: '# of Things',
          // data: [12, 19, 3, 5, 2, 3],
          data: labels.map(() => faker.datatype.number({ min: 1, max: 15 })),
          backgroundColor: [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)',
            'rgba(153, 102, 255, 0.2)',
            'rgba(255, 159, 64, 0.2)',
          ],
          borderColor: [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)',
            'rgba(255, 159, 64, 1)',
          ],
          borderWidth: 1,
        },
      ],
    };

    const lineOptions = {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'top' as const,
        },
        title: {
          display: true,
          text: 'Memory Usage',
        },
      },
      options: {
        scales: {
          x: {
            type: 'timeseries',
            time: {
              unit: 'hour'
            }
          }
        }
      }
    };

      // line chart data, generated by faker
      const lineData = {
        labels,
        datasets: [
          {
            label: 'percentage used',
            data: [0],
            // data: labels.map(() => faker.datatype.number({ min: 0, max: 100 })),
            backgroundColor: 'rgba(255, 99, 132, 0.5)',
          }
        ],
      };

    // ## end chart demo data

    // create a ref to the chart.js instance
    // works without types, but these have been suggested:
    const lineChartRef = useRef<ChartJS<"line", number[], string>>(null);
    // const lineChartRef = useRef();
    const barChartRef = useRef();


    setInterval(function() {
        // get the chart.js instance
        const chart = lineChartRef.current;
        // generate new data
        const newLabel = (Math.random() + 1).toString(36).substring(7);
        const newData = Math.floor(Math.random() * (100 - 1 + 1)) + 1;
        console.log("*******",chart, newData);
        // push new data
        chart.data.labels.push(newLabel);
        chart.data.datasets[0].data.push(newData);
        // update rendered chart
        chart.update();
    }, 2000);



    return (
        <>

        <div
            style={{
            position: 'relative',
            height: '20vh',
            width: '80vw',
            margin: 'auto',
            }}
        >
            vanilla chart canvas:
            <canvas id="vcc"></canvas>
        </div>


        <div
            style={{
            position: 'relative',
            height: '20vh',
            width: '80vw',
            margin: 'auto',
            }}
        >
            React chart js:
            <Line id="r2Line" ref={lineChartRef}  options={lineOptions} data={lineData} />
        </div>


        <div
            style={{
            position: 'relative',
            height: '20vh',
            width: '80vw',
            margin: 'auto',
            }}
        >
            React chart js:
            <Bar ref={barChartRef} options={barOptions} data={barData} />

        </div>


        <div style={{ position: 'relative', height: '40vw', width: '80vh' }}>
            React chart js:
            <Doughnut data={doughData} />
        </div>

        </>
  );
};

export default ContainerChart;

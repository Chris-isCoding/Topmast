import React from "react";
import { Box, Stack, TextField, Typography } from "@mui/material";
import Button from "@mui/material/Button";
import { createDockerDesktopClient } from "@docker/extension-api-client";

// ## CHART STUFF ##
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from "chart.js";
import { Bar } from "react-chartjs-2";
//import Bar from '../components/Chart_Bar';
import { Doughnut } from "react-chartjs-2";
// import Doughnut from '../components/Chart-Doughnut';

import { faker } from "@faker-js/faker";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

export const barOptions = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    legend: {
      position: "top" as const,
    },
    title: {
      display: true,
      text: "Very Important Container Data",
    },
  },
};

const labels = ["January", "February", "March", "April", "May", "June", "July"];

// bar chart data, generated by faker
export const barData = {
  labels,
  datasets: [
    {
      label: "Important Dataset 1",
      // data: [120, 190, 300, 500, 900, 350, 200],
      data: labels.map(() => faker.datatype.number({ min: 0, max: 1000 })),
      backgroundColor: "rgba(255, 99, 132, 0.5)",
    },
    {
      label: "Important Dataset 2",
      data: labels.map(() => faker.datatype.number({ min: 0, max: 1000 })),
      backgroundColor: "rgba(53, 162, 235, 0.5)",
    },
  ],
};

export const doughData = {
  labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
  datasets: [
    {
      label: "# of Things",
      // data: [12, 19, 3, 5, 2, 3],
      data: labels.map(() => faker.datatype.number({ min: 1, max: 15 })),
      backgroundColor: [
        "rgba(255, 99, 132, 0.2)",
        "rgba(54, 162, 235, 0.2)",
        "rgba(255, 206, 86, 0.2)",
        "rgba(75, 192, 192, 0.2)",
        "rgba(153, 102, 255, 0.2)",
        "rgba(255, 159, 64, 0.2)",
      ],
      borderColor: [
        "rgba(255, 99, 132, 1)",
        "rgba(54, 162, 235, 1)",
        "rgba(255, 206, 86, 1)",
        "rgba(75, 192, 192, 1)",
        "rgba(153, 102, 255, 1)",
        "rgba(255, 159, 64, 1)",
      ],
      borderWidth: 1,
    },
  ],
};

// # end chart stuff #

type Props = {};

const client = createDockerDesktopClient();
function useDockerDesktopClient() {
  return client;
}

const Dashboard = (props: Props) => {
  const [containers, setContainers] = React.useState<any[]>([]);
  const [logs, setLogs] = React.useState<any[]>([]);
  const [stats, setStats] = React.useState('');
  const ddClient = useDockerDesktopClient();

  React.useEffect(() => {
    // List all containers
    ddClient.docker.cli
      .exec("ps", ["--all", "--format", '"{{json .}}"'])
      .then((result) => {
        // result.parseJsonLines() parses the output of the command into an array of objects
        setContainers(result.parseJsonLines());
      })
      .then((result) => {
        //this command will fetch the last 5 lines of each log from the list of containers.
        containers.forEach((container) => {
          // console.log(container.ID);
          ddClient.docker.cli
            .exec(`container logs -n 5 ${container.ID}`, [])
            .then((result) => {
              console.log(result.stderr);
              setLogs(logs.concat(result.stderr));
            });
        });
      });
    // this grabs a snapshot of the metrics of ALL containers
    ddClient.docker.cli.exec("stats", ["--no-stream", "-a"]).then((result) => {
      // console.log(result);
      setStats(result.stdout);
    });
  }, [containers, logs, stats]);

  return (
    <Box>
      {/* // <Typography variant='h3'>Docker extension demo</Typography>
      //{' '} */}

      <div
        style={{
          position: "relative",
          height: "20vh",
          width: "80vw",
          margin: "auto",
        }}
      >
        <Bar options={barOptions} data={barData} />
      </div>

      <Typography variant="body1" color="text.secondary" sx={{ mt: 2 }}>
        This is a basic page rendered with MUI, using Docker's theme. Read the
        MUI documentation to learn more. Using MUI in a conventional way and
        avoiding custom styling will help make sure your extension continues to
        look great as Docker's theme evolves.
      </Typography>
      <Typography variant="body1" color="text.secondary" sx={{ mt: 2 }}>
        Pressing the below button will trigger a request to the backend. Its
        response will appear in the textarea.
      </Typography>
      <Stack direction="row" alignItems="start" spacing={2} sx={{ mt: 4 }}>
        <Button
          variant="contained"
          //this button used to fetch the data
          //it now has a placeholder in case we want it to do something.
          onClick={() => console.log("clicked")}
        >
          Call backend
        </Button>
        <TextField
          label="Containers go here"
          sx={{ width: 480 }}
          disabled
          multiline
          variant="outlined"
          minRows={5}
          // we can assign this value to stats, logs, and container list
          value={JSON.stringify(containers, undefined, 2) ?? ""}
        />
        <TextField
          label="Logs go here"
          sx={{ width: 480 }}
          disabled
          multiline
          variant="outlined"
          minRows={5}
          // we can assign this value to stats, logs, and container list
          value={JSON.stringify(logs, undefined, 2) ?? ""}
        />
        <TextField
          label="Stats go here"
          sx={{ width: 480 }}
          disabled
          multiline
          variant="outlined"
          minRows={5}
          // we can assign this value to stats, logs, and container list
          value={stats ?? ""}
        />
      </Stack>
    </Box>
  );
};

export default Dashboard;
